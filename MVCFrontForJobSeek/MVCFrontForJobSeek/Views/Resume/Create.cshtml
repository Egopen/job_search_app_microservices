@model MVCFrontForJobSeek.Controllers.ResumeController.ResumeRequest

@{
    ViewData["Title"] = "Добавить резюме";
    var accessToken = ViewData["AccessToken"] as string;  // Получаем токен
}

<h2 class="text-center">Добавить резюме</h2>

<form id="resumeForm" method="post">
    <div class="form-group">
        <label for="jobName">Название специальности:</label>
        <input type="text" id="jobName" name="JobName" class="form-control" required />
    </div>
    <div class="form-group">
        <label for="mobilePhone">Имя:</label>
        <input type="tel" id="name" name="Name" class="form-control" required />
    </div>
    <div class="form-group">
        <label for="mobilePhone">Мобильный телефон:</label>
        <input type="tel" id="mobilePhone" name="MobilePhone" class="form-control" required />
    </div>

    <div class="form-group">
        <label for="city">Город:</label>
        <input type="text" id="city" name="City" class="form-control" required />
    </div>

    <div class="form-group">
        <label for="status">Статус:</label>
        <select id="status" name="StatusId" class="form-control" required>
            <option value="">Выберите статус</option>
        </select>
    </div>

    <div class="form-group">
        <label for="salary">Зарплата:</label>
        <input type="number" id="salary" name="Salary" class="form-control" required />
    </div>

    <div class="form-group">
        <label for="desc">Описание:</label>
        <textarea id="desc" name="Desc" class="form-control"></textarea>
    </div>

    <button type="submit" class="btn btn-primary mt-3">Сохранить</button>
</form>

<script>
    console.log("Access Token:", "@accessToken"); // Выведем токен в консоль, чтобы убедиться, что он передается

    // Запрос статусов для выпадающего списка
    document.addEventListener("DOMContentLoaded", async function () {
        try {
            const response = await fetch('http://localhost:8080/gateway/JobSeeker/Status/GetAllStatuses');
            if (response.ok) {
                const statuses = await response.json();
                const statusSelect = document.getElementById("status");
                statuses.forEach(status => {
                    const option = document.createElement("option");
                    option.value = status.id;
                    option.textContent = status.desc;
                    statusSelect.appendChild(option);
                });
            } else {
                alert("Ошибка загрузки статусов.");
            }
        } catch (error) {
            console.error("Ошибка при загрузке статусов:", error);
        }
    });

    // Обработка отправки формы
    document.getElementById("resumeForm").addEventListener("submit", async function (event) {
        event.preventDefault();

        const form = event.target;
        const data = {
    JobName: form.JobName.value,
    Name: form.Name.value,
    MobilePhone: form.MobilePhone.value,
    City: form.City.value,
    StatusId: parseInt(form.StatusId.value),
    Salary: parseInt(form.Salary.value),
    Desc: form.Desc.value
};

        try {
            const response = await fetch('http://localhost:5003/gateway/JobSeeker/Resume/CreateResume', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${"@accessToken"}` // Используем переданный токен
                },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                alert("Резюме успешно добавлено!");
                window.location.href = "/Profile";
            } else {
                const error = await response.json();
                alert(`Ошибка: ${error.message || "Что-то пошло не так"}`);
            }
        } catch (error) {
            console.error("Ошибка при отправке формы:", error);
        }
    });
</script>

<style>
    .form-group {
        margin-bottom: 15px;
    }

    label {
        font-weight: bold;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        font-size: 16px;
    }

    button {
        display: block;
        width: 100%;
        padding: 10px;
        font-size: 18px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
    }

        button:hover {
            background-color: #0056b3;
        }
</style>
